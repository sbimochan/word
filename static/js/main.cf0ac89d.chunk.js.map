{"version":3,"sources":["serviceWorker.js","utils/http.js","services/dictionaryServices.js","constants.js","components/Boggle.js","index.js"],"names":["Boolean","window","location","hostname","match","http","axios","create","baseURL","process","headers","checkDictionary","word","a","async","formattedData","post","data","BACKSPACE_KEYCODE","ENTER_KEYCODE","Boggle","state","isLoading","score","validWords","isCurrentWordValid","currentWord","randomLetters","status","isTimeUp","isModalOpen","timerDuraion","isNewGame","setState","checkWord","response","responseData","isValidWord","collectWords","resetWord","includes","length","generateLetters","result","Set","charactersLength","size","add","charAt","Math","floor","random","saveCurrentLetter","key","concat","doBackspace","event","keyCode","constants","slice","handleShortcutKeys","endGame","componentWillUnmount","closeModal","renderTime","value","className","reset","componentDidMount","this","document","addEventListener","removeEventListener","title","ghost","avatar","src","Content","style","height","gutter","span","map","isPlaying","durationSeconds","onComplete","colors","align","type","disabled","onClick","letter","index","e","target","innerText","spinning","user","repo","visible","onOk","onCancel","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf0ac89d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nconst baseURI = process.env.REACT_APP_BASE_URI;\n\nconst http = axios.create({\n\tbaseURL: baseURI,\n\theaders: {\n\t\t'Content-Type': 'application/json'\n\t}\n});\n\nexport default http;","import http from '../utils/http';\n\nexport async function checkDictionary(word) {\n  const URI = '/boggle';\n  const formattedData = {word};\n  const data = await http.post(URI, formattedData);\n  \n  return data;\n}","export const NUMBER_OF_FACES = 16;\nexport const BACKSPACE_KEYCODE = 8;\nexport const ENTER_KEYCODE = 13","import React, {Component} from 'react';\nimport {\n  Row,\n  Col,\n  Spin,\n  PageHeader,\n  Layout,\n  Button,\n  Modal\n} from 'antd';\nimport {Github} from 'react-social-github';\nimport {CountdownCircleTimer} from 'react-countdown-circle-timer';\n\nimport {checkDictionary} from 'src/services/dictionaryServices';\nimport * as constants from 'src/constants';\n\nimport 'antd/dist/antd.css';\nimport 'src/App.css';\n\nexport default class Boggle extends Component {\n  state = {\n      isLoading: false,\n      score: 0,\n      validWords: [],\n      isCurrentWordValid: false,\n      currentWord: '',\n      randomLetters: [],\n      status: '',\n      isTimeUp: false,\n      isModalOpen: false,\n      timerDuraion: 180,\n      isNewGame: false\n    }\n\n  isLoading = isLoading => {\n    this.setState({isLoading});\n  };\n\n  checkWord = async() => {\n    if (this.state.isTimeUp) {\n      return\n    }\n    this.isLoading(true);\n    try {\n      const response = await checkDictionary(this.state.currentWord);\n      const responseData = (response && response.data) || [];\n      this.setState({isCurrentWordValid: responseData.isValidWord});\n    } catch (error) {\n      this.setState({status: 'Something wrong with server.'});\n    }\n    if (this.state.isCurrentWordValid) {\n      this.collectWords();\n    } else {\n      this.setState({status: 'Invalid word'});\n    }\n    this.isLoading(false);\n    this.resetWord();\n  };\n\n  /**\n     * Prevent repetitions\n     */\n  collectWords = () => {\n    if (!this.state.validWords.includes(this.state.currentWord)) {\n      this.setState({\n        validWords: [\n          ...this.state.validWords,\n          this.state.currentWord\n        ],\n        score: this.state.score + this.state.currentWord.length,\n        status: ''\n      });\n    } else {\n      this.setState({status: 'You tried same twice. I got you!'});\n    }\n  };\n\n  /**\n     * Credit: https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n     */\n  generateLetters = length => {\n    let result = new Set();\n    let characters = 'abcdefghijklmnopqrstuvwxyz';\n    let charactersLength = characters.length;\n    this.isLoading(true);\n    while (result.size < length) {\n      result.add(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    }\n    this.setState({\n      randomLetters: [...result] //Converting Set to array\n    });\n    this.isLoading(false);\n  };\n\n  saveCurrentLetter = key => {\n    if (this.state.isTimeUp) {\n      return\n    }\n    this.setState({\n      currentWord: this\n        .state\n        .currentWord\n        .concat(key)\n    });\n  };\n\n  resetWord = () => {\n    this.setState({currentWord: ''});\n  };\n\n  doBackspace = event => {\n    switch (event.keyCode) {\n      case constants.BACKSPACE_KEYCODE:\n        this.setState({\n          currentWord: this\n            .state\n            .currentWord\n            .slice(0, -1)\n        });\n        break;\n      case constants.ENTER_KEYCODE:\n        this.checkWord();\n        break;\n      default:\n        break;\n    }\n    this.handleShortcutKeys(event.key);\n  };\n\n  handleShortcutKeys = key => {\n    if (this.state.randomLetters.includes(key)) {\n      this.saveCurrentLetter(key);\n    }\n  }\n\n  endGame = () => {\n    this.setState({\n      isTimeUp: true,\n      isModalOpen: true\n    });\n    this.componentWillUnmount();\n  }\n\n  closeModal = () => {\n    this.setState({\n      isModalOpen: false\n    })\n  }\n\n  renderTime = value => {\n    if (value === 0) {\n      return <div className=\"timer\">Too late...</div>;\n    }\n\n    return (\n      <div className=\"timer\">\n        <div className=\"text\">Remaining</div>\n        <div className=\"value\">{value}</div>\n        <div className=\"text\">seconds</div>\n      </div>\n    );\n  };\n\n  reset = () => {\n    this.setState({\n      isLoading: false,\n      score: 0,\n      validWords: [],\n      isCurrentWordValid: false,\n      currentWord: '',\n      randomLetters: [],\n      status: '',\n      isTimeUp: false,\n      isModalOpen: false,\n      timerDuraion: 10,\n      isNewGame: true\n    });\n    this.componentDidMount();\n  }\n  componentDidMount() {\n    this.generateLetters(constants.NUMBER_OF_FACES);\n    document.addEventListener('keydown', this.doBackspace, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.doBackspace, false);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <PageHeader\n          title=\"Boggle Game\"\n          ghost={false}\n          avatar={{\n          src: 'https://avatars1.githubusercontent.com/u/8186664?s=460&v=4'\n        }}/>\n        <Layout.Content style={{\n          height: '100vh'\n        }}>\n          <Row gutter={[36, 36]} className=\"pd-20\">\n            <Col span={8}>\n              <h2>Status</h2>\n              <div className=\"message-block pd-20\">{this.state.status}</div>\n              <div className=\"valid-word-list pd-20\">\n                <ul>\n                  {this\n                    .state\n                    .validWords\n                    .map(word => (\n                      <li>{word}</li>\n                    ))}\n                </ul>\n              </div>\n              <CountdownCircleTimer\n                isPlaying\n                durationSeconds={this.state.timerDuraion}\n                renderTime={this.renderTime}\n                onComplete={()=> {\n                  this.endGame();\n                  return [this.state.isNewGame,0]\n                  }}\n                colors={[\n                [\n                  '#004777', .33\n                ],\n                [\n                  '#F7B801', .33\n                ],\n                ['#A30000']\n              ]}/>\n\n            </Col>\n            <Col span={6} align=\"middle\">\n              <div className=\"pd-20\">\n                <input type=\"text\" value={this.state.currentWord} disabled/>\n                <Button type=\"primary\" className=\"md-20\" onClick={this.resetWord}>\n                  Reset\n                </Button>\n              </div>\n              <div className=\"grid\">\n                {this\n                  .state\n                  .randomLetters\n                  .map((letter, index) => (\n                    <div\n                      key={index}\n                      className=\"cell\"\n                      onClick={(e) => this.saveCurrentLetter(e.target.innerText)}>\n                      {letter}\n                    </div>\n                  ))}\n              </div>\n              <Button type=\"primary\" onClick={this.checkWord} className=\"word-submit\">\n                It is a word\n              </Button>\n              <div>\n                <Spin size=\"large\" spinning={this.state.isLoading}/>\n              </div>\n            </Col>\n            <Col span={4}>\n              <h2>Scores</h2>\n              <div className=\"score\">{this.state.score}</div>\n              <div>\n                <Button\n                  type=\"primary\"\n                  onClick={() => this.generateLetters(constants.NUMBER_OF_FACES)}>\n                  Shuffle boggle\n                </Button>\n              </div>\n            </Col>\n            <Col span={4}>\n              <Github user=\"sbimochan\" repo=\"boggle\"></Github>\n            </Col>\n          </Row>\n          <Modal\n          title=\"Game Over\"\n          visible={this.state.isModalOpen}\n          onOk={this.reset}\n          onCancel={this.closeModal}\n        >\n          <p>Your score is <strong>{this.state.score}</strong></p>\n          <p>Do you wanna reset game?</p>\n        </Modal>\n        </Layout.Content>\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Boggle from 'src/components/Boggle';\nimport 'src/index.css';\n\nReactDOM.render(<Boggle />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}