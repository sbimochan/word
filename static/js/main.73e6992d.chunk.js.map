{"version":3,"sources":["serviceWorker.js","utils/http.js","services/dictionaryServices.js","constants.js","components/WordGame.js","index.js"],"names":["Boolean","window","location","hostname","match","http","axios","create","baseURL","process","headers","checkDictionary","word","a","async","formattedData","post","data","BACKSPACE_KEYCODE","ENTER_KEYCODE","WordGame","state","isLoading","score","validWords","isCurrentWordValid","currentWord","randomLetters","status","isTimeUp","isModalOpen","timerDuraion","isNewGame","setState","checkWord","length","response","responseData","isValidWord","collectWords","resetWord","includes","generateLetters","result","Set","charactersLength","size","add","charAt","Math","floor","random","saveCurrentLetter","key","concat","doBackspace","event","keyCode","constants","slice","handleShortcutKeys","endGame","componentWillUnmount","closeModal","renderTime","value","className","reset","componentDidMount","this","document","addEventListener","removeEventListener","title","ghost","avatar","src","Content","style","height","gutter","span","map","index","isPlaying","durationSeconds","onComplete","colors","align","type","disabled","onClick","letter","e","target","innerText","spinning","user","repo","visible","onOk","onCancel","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73e6992d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nconst baseURI = process.env.REACT_APP_BASE_URI;\n\nconst http = axios.create({\n\tbaseURL: baseURI,\n\theaders: {\n\t\t'Content-Type': 'application/json'\n\t}\n});\n\nexport default http;","import http from \"../utils/http\";\n\nexport async function checkDictionary(word) {\n  const URI = \"/word-checker\";\n  const formattedData = { word };\n  const data = await http.post(URI, formattedData);\n\n  return data;\n}\n","export const NUMBER_OF_FACES = 16;\nexport const BACKSPACE_KEYCODE = 8;\nexport const ENTER_KEYCODE = 13","import React, { Component } from \"react\";\nimport { Row, Col, Spin, PageHeader, Layout, Button, Modal } from \"antd\";\nimport { Github } from \"react-social-github\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nimport { checkDictionary } from \"src/services/dictionaryServices\";\nimport * as constants from \"src/constants\";\n\nimport \"antd/dist/antd.css\";\nimport \"src/App.css\";\n\nexport default class WordGame extends Component {\n  state = {\n    isLoading: false,\n    score: 0,\n    validWords: [],\n    isCurrentWordValid: false,\n    currentWord: \"\",\n    randomLetters: [],\n    status: \"\",\n    isTimeUp: false,\n    isModalOpen: false,\n    timerDuraion: 180,\n    isNewGame: false,\n  };\n\n  isLoading = (isLoading) => {\n    this.setState({ isLoading });\n  };\n\n  checkWord = async () => {\n    if (this.state.isTimeUp) {\n      return;\n    }\n    if (this.state.currentWord.length <= 1) {\n      this.setState({ status: \"Enter word more than 1 character\" });\n      return;\n    }\n    this.isLoading(true);\n    try {\n      const response = await checkDictionary(this.state.currentWord);\n      const responseData = (response && response.data) || [];\n      this.setState({ isCurrentWordValid: responseData.isValidWord });\n    } catch (error) {\n      this.setState({ status: \"Something wrong with server.\" });\n    }\n    if (this.state.isCurrentWordValid) {\n      this.collectWords();\n    } else {\n      this.setState({ status: \"Invalid word\" });\n    }\n    this.isLoading(false);\n    this.resetWord();\n  };\n\n  /**\n   * Prevent repetitions\n   */\n  collectWords = () => {\n    if (!this.state.validWords.includes(this.state.currentWord)) {\n      this.setState({\n        validWords: [...this.state.validWords, this.state.currentWord],\n        score: this.state.score + this.state.currentWord.length,\n        status: \"\",\n      });\n    } else {\n      this.setState({ status: \"You tried same twice. I got you!\" });\n    }\n  };\n\n  /**\n   * Credit: https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n   */\n  generateLetters = (length) => {\n    let result = new Set();\n    let characters = \"abcdefghijklmnopqrstuvwxyz\";\n    let charactersLength = characters.length;\n    this.isLoading(true);\n    while (result.size < length) {\n      result.add(\n        characters.charAt(Math.floor(Math.random() * charactersLength))\n      );\n    }\n    this.setState({\n      randomLetters: [...result], //Converting Set to array\n    });\n    this.isLoading(false);\n  };\n\n  saveCurrentLetter = (key) => {\n    if (this.state.isTimeUp) {\n      return;\n    }\n    this.setState({\n      currentWord: this.state.currentWord.concat(key),\n    });\n  };\n\n  resetWord = () => {\n    this.setState({ currentWord: \"\" });\n  };\n\n  doBackspace = (event) => {\n    switch (event.keyCode) {\n      case constants.BACKSPACE_KEYCODE:\n        this.setState({\n          currentWord: this.state.currentWord.slice(0, -1),\n        });\n        break;\n      case constants.ENTER_KEYCODE:\n        this.checkWord();\n        break;\n      default:\n        break;\n    }\n    this.handleShortcutKeys(event.key);\n  };\n\n  handleShortcutKeys = (key) => {\n    if (this.state.randomLetters.includes(key)) {\n      this.saveCurrentLetter(key);\n    }\n  };\n\n  endGame = () => {\n    this.setState({\n      isTimeUp: true,\n      isModalOpen: true,\n    });\n    this.componentWillUnmount();\n  };\n\n  closeModal = () => {\n    this.setState({\n      isModalOpen: false,\n    });\n  };\n\n  renderTime = (value) => {\n    if (value === 0) {\n      return <div className=\"timer\">Too late...</div>;\n    }\n\n    return (\n      <div className=\"timer\">\n        <div className=\"text\">Remaining</div>\n        <div className=\"value\">{value}</div>\n        <div className=\"text\">seconds</div>\n      </div>\n    );\n  };\n\n  reset = () => {\n    this.setState({\n      isLoading: false,\n      score: 0,\n      validWords: [],\n      isCurrentWordValid: false,\n      currentWord: \"\",\n      randomLetters: [],\n      status: \"\",\n      isTimeUp: false,\n      isModalOpen: false,\n      timerDuraion: 10,\n      isNewGame: true,\n    });\n    this.componentDidMount();\n  };\n  componentDidMount() {\n    this.generateLetters(constants.NUMBER_OF_FACES);\n    document.addEventListener(\"keydown\", this.doBackspace, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.doBackspace, false);\n  }\n\n  render() {\n    return (\n      <Layout>\n        <PageHeader\n          title=\"Word Game\"\n          ghost={false}\n          avatar={{\n            src: \"https://avatars1.githubusercontent.com/u/8186664?s=460&v=4\",\n          }}\n        />\n        <Layout.Content\n          style={{\n            height: \"100vh\",\n          }}\n        >\n          <Row gutter={[36, 36]} className=\"pd-20\">\n            <Col span={8}>\n              <h2>Status</h2>\n              <div className=\"message-block pd-20\">{this.state.status}</div>\n              <div className=\"valid-word-list pd-20\">\n                <ul>\n                  {this.state.validWords.map((word, index) => (\n                    <li key={index}>{word}</li>\n                  ))}\n                </ul>\n              </div>\n              <CountdownCircleTimer\n                isPlaying\n                durationSeconds={this.state.timerDuraion}\n                renderTime={this.renderTime}\n                onComplete={() => {\n                  this.endGame();\n                  return [this.state.isNewGame, 0];\n                }}\n                colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n              />\n            </Col>\n            <Col span={6} align=\"middle\">\n              <div className=\"pd-20\">\n                <input type=\"text\" value={this.state.currentWord} disabled />\n                <Button\n                  type=\"primary\"\n                  className=\"md-20\"\n                  onClick={this.resetWord}\n                >\n                  Reset\n                </Button>\n              </div>\n              <div className=\"grid\">\n                {this.state.randomLetters.map((letter, index) => (\n                  <div\n                    key={index}\n                    className=\"cell\"\n                    onClick={(e) => this.saveCurrentLetter(e.target.innerText)}\n                  >\n                    {letter}\n                  </div>\n                ))}\n              </div>\n              <Button\n                type=\"primary\"\n                onClick={this.checkWord}\n                className=\"word-submit\"\n              >\n                It is a word\n              </Button>\n              <div>\n                <Spin size=\"large\" spinning={this.state.isLoading} />\n              </div>\n            </Col>\n            <Col span={4}>\n              <h2>Scores</h2>\n              <div className=\"score\">{this.state.score}</div>\n              <div>\n                <Button\n                  type=\"primary\"\n                  onClick={() =>\n                    this.generateLetters(constants.NUMBER_OF_FACES)\n                  }\n                >\n                  Shuffle word\n                </Button>\n              </div>\n            </Col>\n            <Col span={4}>\n              <Github user=\"sbimochan\" repo=\"word\"></Github>\n            </Col>\n          </Row>\n          <Modal\n            title=\"Game Over\"\n            visible={this.state.isModalOpen}\n            onOk={this.reset}\n            onCancel={this.closeModal}\n          >\n            <p>\n              Your score is <strong>{this.state.score}</strong>\n            </p>\n            <p>Do you wanna reset game?</p>\n          </Modal>\n        </Layout.Content>\n      </Layout>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport WordGame from \"src/components/WordGame\";\nimport \"src/index.css\";\n\nReactDOM.render(<WordGame />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}